require Remote
const size=500000

dim hosts as string[]={"127.0.0.1","127.0.0.1"}
dim ports as int[]={13080,13090}
//dim hosts as string[]=new string[0]
//dim ports as int[]=new int[0]
dim mem_hosts as string[]={"127.0.0.1"}
dim mem_ports as int[]={11211}
dim nodes as RemoteNode[]=ConnectNode(5080,hosts,ports,mem_hosts,mem_ports)
dim toput as double[]
dim buf as shared double[] global=new double[size] global
dim accu as shared RAccumulator=new RAccumulator(2,size,buf)

function proc(par as var) as int
    dim localbuf as float[]=new float[size]
	dim localbuf2 as double[]=new double[size]
    dim i as int
    for i=0;i<size;i++
        localbuf[i]=par+i
    end
	dim t as int
	dim tsum as int
    for #i=0;#i<10;#i++
		print("KKKK\n")
		t=GetClock()
        accu.Accumulatef(localbuf,-1)
		tsum+= (GetClock()-t)
    end
	println(tsum)
	localbuf2[0:size]=buf[0:size]
	dim other as int
	if par==1 then
		other=2
	else
		other=1
	end
	println( localbuf[0])
    for i=0;i<size;i++
        if localbuf2[i]-localbuf[i]!= other+i then
			println("ERRR"+i)
			println("ERRR "+ localbuf2[i] +" "+(localbuf[i]+ other+i))
			break
		end
    end
	dim p as var
	for ;;
		p=gets()
		println(localbuf2[p])
	end
end

nodes[0].CreateThread(proc,1)
nodes[1].CreateThread(proc,2)

gets()
