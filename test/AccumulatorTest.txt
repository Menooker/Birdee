require Remote
require math
const size=50000

dim hosts as string[]={"127.0.0.1","127.0.0.1"}
dim ports as int[]={13080,13090}
//dim hosts as string[]=new string[0]
//dim ports as int[]=new int[0]
dim mem_hosts as string[]={"127.0.0.1"}
dim mem_ports as int[]={11211}
dim nodes as RemoteNode[]=ConnectNode(5080,hosts,ports,mem_hosts,mem_ports)
dim toput as double[]
dim buf as shared double[] global=new double[size] global
dim bufs as shared double[][] global = new double[2][] global 
dim accu as shared RAccumulator=new RAccumulator(2,size,buf)
bufs[0]=new double[size] global
bufs[1]=new double[size] global


function proc(par as var) as int
	$_Config_Remote_Accumulator_Mode=2
	$_Config_Remote_Accumulator_Threshold=0.01
    dim localbuf as double[]=new double[size]
	dim localbuf2 as double[]=new double[size]
    dim i as int
    for i=0;i<size;i++
        localbuf[i]=par+i
    end
    for i=0;i<size*4/3;i++
		dim k as int=rand(size)
		if k<0 then
			k=-k
		end
        localbuf[k]=0.009
    end
	bufs[par][0:size]=localbuf[0:size]
	dim t as int
	dim tsum as int
    for #i=0;#i<3;#i++
		print("KKKK\n")
		t=GetClock()
        accu.Accumulate(localbuf,-1)
		tsum+= (GetClock()-t)
    end
	println(tsum)
	dim other as int
	if par==1 then
		other=0
	else
		other=1
	end
	localbuf2[0:size]=bufs[other][0:size]
	println( localbuf[0])
    for i=0;i<size;i++
		dim delta as double= localbuf2[i]+localbuf[i] -buf[i]
        if delta<0 || delta >= 2.0* $_Config_Remote_Accumulator_Threshold then
			println("ERRR"+i)
			println("ERRR "+ buf[i] +"!="+(localbuf[i]+ localbuf2[i]))
			break
		end
    end
	dim p as var
	for ;;
		p=gets()
		println(localbuf[p])
		println(localbuf2[p])
		println(buf[p])
	end
end

nodes[0].CreateThread(proc,0)
nodes[1].CreateThread(proc,1)

gets()
