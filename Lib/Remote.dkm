public class CounterOutOfBoundException
end


public class RemoteNode
		public host as string
		public port as int
		dim socket as int
		dim closed as int
		dim connected as int
		public declare function CreateThread(del as thread_proc,param as int) as RemoteThread
		public declare sub Close()
end

shared public class RemoteThread
	public final tid as int
	dim state as int
	public function getState() as int
		return state
	end
	public function Join(timeout as int,maxinterval as int) as boolean
		dim t as int
		dim itv as int=8
		for t=0 ; state!=3 ;
			if  timeout!=-1 && t>timeout then
				return false
			end
			itv=itv*2
			if itv>maxinterval then
				itv=16
			end
			t+=itv
			Sleep(itv)
		end
		//println("@"+ t +"-"+ itv)
		return true
	end
	//public declare sub Pause()
	//public declare sub Stop()
end

shared public class ThisNodeThread: RemoteThread
	public thistid as int
	override constructor initialize(del as thread_proc,param as int)
		thistid=CreateThread(del,true,param)
		state=1
	end
end

declare function ConnectNode(host as String,port as int) as RemoteNode

shared public class AtomicCounter
		public declare sub Set(n as int)
		public declare function Get() as int
		public declare function Inc(inc as int) as int
		public declare function Dec(dec as int) as int
		constructor initialize(n as int)
			this.Set(n)
		end
end

shared public class RemoteSpinLock
	dim cnt as AtomicCounter
	constructor initialize()
		cnt=new AtomicCounter(0)
	end
	
	public sub leave()
		cnt.Set(0)
	end

	public function enter(timeout as int,maxinterval as int) as boolean
		dim t as int=0
		dim itv as int=8
		for  ;  ;
			if cnt.Get()==0 then
				if cnt.Inc(1)==1 then
					return true
				end
			end
			if  timeout!=-1 && t>timeout then
				return false
			end
			itv=itv*2
			if itv>maxinterval then
				itv=16
			end
			t+=itv
			Sleep(itv)
		end
		//println("@"+ t +"-"+ itv)
		return true
	end
end

shared public class RBarrier
	dim cnt as int
	constructor initialize(count as int)
		cnt=count
	end
	public declare sub enter(max_wait as int)
end

shared public class RemoteBarrier
	dim cnt as AtomicCounter
	dim go0 as int
	dim go1 as int
	dim turn as int
	dim max_cnt as int
	constructor initialize(count as int)
		cnt=new AtomicCounter(0)
		go0=0
		go1=0
		turn=0
		max_cnt=count
	end

	public sub printstat()
		println("stat: cnt="+cnt.Get() + " go0=" + go0 + " go1=" + go1 + " turn="+turn)	
	end

	public sub enter(timeout as int,maxinterval as int) throws CounterOutOfBoundException
		dim myturn as int=turn
		//println("to inc cnt")
		dim c as int=this.cnt.Inc(1)
		//println("cnt="+c)
		if c==max_cnt then
			turn++
			if turn==100000 then
				turn = 0
			end
			cnt.Set(0)
			if turn%2==0 then
				//if turn was originally odd
				go0=0
				go1=1
			else
				go1=0
				go0=1
			end
			return
		end
		if c>max_cnt then
			//println("OUT!")
			dim e as CounterOutOfBoundException
			throw e
		end
		dim t as int=0
		dim itv as int=8
		for  ;  ;
			if myturn%2==0 then
				if go0==1 then
					return
				end
			else
				if go1==1 then
					return
				end
			end
			if  timeout!=-1 && t>timeout then
				return
			end
			itv=itv*2
			if itv>maxinterval then
				itv=16
			end
			t+=itv
			Sleep(itv)
		end
	end
end

