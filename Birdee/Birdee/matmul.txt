require Remote

dim round as int = 1
dim cur_round as int
dim time_total as int
dim time_calc as int
dim hosts as string[]={"10.0.3.16","10.0.3.20","10.0.3.21","10.0.3.22"}
dim ports as int[]={13070,13070,13070,13070}
dim mem_hosts as string[]={"10.0.3.16","10.0.3.20","10.0.3.21","10.0.3.22"}
dim mem_ports as int[]={11211,11211,11211,11211}

dim nodes as RemoteNode[]=ConnectNode(5080,hosts,ports,mem_hosts,mem_ports)

println("working")
dim threads as shared int=2
dim node_num as shared int=hosts.size()
dim thread_num as shared int=threads*node_num
dim n as shared int=192

dim barrier_main as shared RBarrier=new RBarrier(thread_num+1)
//dim counter as shared AtomicCounter=new AtomicCounter(0)
dim n2 as int=n*n
dim m1 as shared double[] global=new double[n2] global
dim m2 as shared double[] global=new double[n2] global
dim m3 as shared double[] global=new double[n2] global
dim m4 as shared double[] global=new double[n2] global
dim result as shared double[] global=new double[n2] global


dim mlocal as double[]=new double[n2]
dim mlocal2 as double[]=new double[n2]
function putproc(id as var) as int
	dim i as int
	threads=threads
	for i=0;i<n2;i++
	unsafe
		mlocal2[i]=n2-i
	end
	println("to put2")
	if cur_round % 2==0 then
		m2[0:n2]=mlocal2[0:n2]
	else
		m4[0:n2]=mlocal2[0:n2]
	end
	println("put ok2")
end

sub put_matrix()
	dim threadid as int=CreateThread(putproc,true,1)
	threads=threads
	dim i as int
	for i=0;i<n2;i++
	unsafe
		mlocal[i]=i
	end
	println("to put1")
	if cur_round % 2==0 then
		m1[0:n2]=mlocal[0:n2]
	else
		m3[0:n2]=mlocal[0:n2]
	end
	println("put ok1")
	JoinThread(threadid)	
end
dim time as int=GetClock()
put_matrix()
dim ii as int
dim jj as int
dim ttid as int=0
for ii=0;ii<node_num;ii++
	for jj=0;jj<threads;jj++
		nodes[ii].CreateThread(threadproc,ttid)
		ttid++
	end
end
for cur_round=0;cur_round<round;cur_round++

	dim time2 as int=GetClock()

	if cur_round!= round-1 then
		put_matrix()
	end

	barrier_main.Enter(-1)	
	dim t as int
	t=GetClock()-time
	println("time1 "+ t)
	time_total+=t
	t=GetClock()-time2
	println("time2 "+ t)
	time_calc+=t

	time=GetClock()
	//counter.Set(0)
end
//print_matrix(m1)
//print_matrix(m2)
//print_matrix(result)
println("total time: "+time_total)
println("calc time: "+time_calc)
gets()

sub print_matrix(arr as double[] global)
	dim i as int
	dim j as int
	for i=0;i<n;i++
		for j=0;j<n;j++
			print(arr[i*n+j])
			print(" ")
		end
		print("\n")
	end
end

dim mym1 as double[]
dim mym2 as double[]
dim volatile sync2 as int
function threadproc(id as var) as int
unsafe
	dim tid as int=id
	dim i as int
	dim j as int
	dim k as int
	dim myn as int = n
	dim myn2 as int =n*n
	dim st as int=id % threads
	dim ths as int=threads
	dim mround as int
	dim line as double[]=new double[myn]
	dim col as double[]=new double[myn]
	dim mm1 as double[] global=m1
	dim mm2 as double[] global=m2
	dim mm3 as double[] global=m3
	dim mm4 as double[] global=m4
	dim mresult as double[] global=result
	dim mthreads as int=threads
	dim mythreads as int=thread_num
	col[0]=0
	line[0]=0
	mym2[0]=0
	for ;;
		if mround % 2==0 then
			mym2[myn2*st/mthreads:myn2*(st+1)/mthreads]=mm2[myn2*st/mthreads:myn2*(st+1)/mthreads]
		else
			mym2[myn2*st/mthreads:myn2*(st+1)/mthreads]=mm4[myn2*st/mthreads:myn2*(st+1)/mthreads]
		end
		sync2@+=1
		for ;;
			if sync2==ths then
				break
			end
		end
		dim sum as double
		for i=tid;i<myn;i+=mythreads
			//println(i)
			if mround % 2==0 then
				col[0:myn]=mm1[i*myn : i*myn+myn]
			else
				col[0:myn]=mm3[i*myn : i*myn+myn]
			end
			for j=0;j<myn;j++
				sum=0
				for k=0;k<myn;k++
					sum+=col[k] * mym2[myn*j + k]
				end
				line[j]=sum
			end
			mresult[i*myn : i*myn+myn]=line[0:myn]
		end
		sync2=0
		mround++
		barrier_main.Enter(-1)
	end
end

sub RemoteInitialize()

	//mym1=new double[256*256]
	mym2=new double[256*256]
	println("init ok,size "+ 256*256)
end
