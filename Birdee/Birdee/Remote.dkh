lib Remote

	public class RemoteNode
		public host as string
		public port as int
		dim socket as int
		dim closed as int
		dim connected as int
		public declare function CreateThread(del as thread_proc,param as int) as RemoteThread
		public declare sub Close()
	end

	shared public class RemoteThread
		public final tid as int
		dim state as int
		public declare function getState() as int
		public declare function Join(timeout as int,maxinterval as int) as boolean
		//public declare sub Pause()
		//public declare sub Stop()
	end
	
	shared public class ThisNodeThread: RemoteThread
		public thistid as int
		public override declare constructor initialize(del as thread_proc,param as int)
	end

	declare function ConnectNode(localport as int,host as String[],port as int[],mem_host as String[],mem_port as int[]) as RemoteNode[]

	shared public class AtomicCounter
		public declare sub Set(n as int)
		public declare function Get() as int
		public declare function Inc(inc as int) as int
		public declare function Dec(dec as int) as int
		public declare constructor initialize(n as int)
	end

	shared public class RemoteSpinLock
		public declare constructor initialize()
		public declare sub leave()
		public declare function enter(timeout as int,maxinterval as int) as boolean
	end

	public class CounterOutOfBoundException
	end

	shared public class RemoteBarrier
		
		public declare constructor initialize(count as int)
		public declare sub printstat()
		public declare sub enter(timeout as int,maxinterval as int) throws CounterOutOfBoundException
	end
end
