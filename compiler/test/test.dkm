require Exceptions

class StackEmptyException
end

class HString : Object
	public str as string
	public virtual constructor  initialize(i as string)
		str=i
	end
	public virtual override function hash() as int
		dim i as int
		dim key as int =0
		for i=0;i<str.length()-1;i++
			key = key * (str[i]*2+str[i+1])+ (str[i]+str[i+1]*2)
		end
		return key
	end
	public virtual override function equals(k as Object) as boolean
		if k==null then
			return false
		end
		dim in as HString=k::HString:>
		return in.str==str
	end
end

public abstract class Container <T>
	public abstract  virtual declare sub push(t as T)
	public abstract  virtual declare function pop() as T throws StackEmptyException
end



/*
dim a as Object
dim b as HString=new HString("JI")
println(b.equals(a))
println(b.equals("KK"))
*/
dim b as HString=new HString("JI")
dim a as string="LL"
//println(a.hash())
//println(a.tostr())
println(a.equals(b))
println(b.tostr())

