//require Exceptions
class StackEmptyException
end

class ListNode<T0>

	public prv as ListNode<T0>
	public data as T0

end


public abstract class Container <T>
	public abstract  virtual declare sub push(t as T)
	public abstract  virtual declare function pop() as T throws StackEmptyException
end

public abstract class  Hashable
	public abstract  virtual declare  function hash() as int
	public abstract  virtual declare  function equals(k as Hashable) as boolean
end

class HashNode<K,V>
	public key as K
	public value as V
	public  constructor  initialize(k as K,v as V)
		key=k
		value=v
	end

end

public class HashMap<K:Hashable,V>
	dim stks as Stack<HashNode<K,V>>[]
	
	public virtual constructor  initialize()
		stks=new Stack<HashNode<K,V>>[10]
	end

	function find(key as K) as HashNode<K,V>
		dim stk as Stack<HashNode<K,V>> =stks[key.hash()%10]
		dim t as HashNode<K,V> 
		t=stk.top(t)
		dim nd as ListNode<HashNode<K,V>>
		for nd=stk.tail;nd!=null;nd=nd.prv
			if nd.data.key.equals(key) then
				return nd.data
			end
		end
		return null
	end

	public virtual sub put(key as K,value as V) 
		dim n as HashNode<K,V>
		n=this.find(key)
		if n!=null then
			n.value=value
		else
			stks[key.hash()%10].push(key,value)
		end
	end
end

public class Stack<T1> :  Container

	public tail as ListNode<T1>

	public function top(a as T1) as T1
		return tail.data
	end

	public override sub push(t as T1)
		dim top as ListNode<T1> = this.tail
		tail=new ListNode()
		tail.data=t
		tail.prv=top
	end

	public override function pop() as T1 throws StackEmptyException
		dim top as ListNode<T1> = this.tail
		if(top==null) then
			dim e as StackEmptyException 
			throw e
		end
		tail=top.prv
		return top.data
	end
end



try
	dim a as Stack<int> =new Stack()
	dim cnt as Container<int> =a
	cnt.push(1)
	cnt.push(2)
	cnt.push(3)
	println(a.pop())
	println(a.pop())
	println(a.pop())
catch StackEmptyException ex
	println("Stack Empty")
end

/*
delegate m( a as int) as void

sub fun1(a as int)

end

function hash(k as string) as int
	dim i as int
	dim key as int =0
	for i=0;i<7;i++
		key = key * (k[i]*2+k[i+1])+ (k[i]+k[i+1]*2)
	end
	return key
end

println("Input the password :")
dim str as string=gets()
dim key1 as int=hash(str)
dim fun as m={fun1}
select (key1%1)
case 0
	println("KKKK")
case 1
	println("KKKK2")
end*/

