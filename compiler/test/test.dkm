require Exceptions

interface Hashable
	public virtual declare function hash() as int
	public virtual declare function equals(k as Hashable) as boolean
end

class StackEmptyException
end

class HString : Hashable
	public str as string
	public virtual constructor  initialize(i as string)
		str=i
	end
	public virtual override function hash() as int
		dim i as int
		dim key as int =0
		for i=0;i<str.length()-1;i++
			key = key * (str[i]*2+str[i+1])+ (str[i]+str[i+1]*2)
		end
		return key
	end
	public virtual override function equals(k as Hashable) as boolean
		dim in as HString=k::HString:>
		return in.str==str
	end
end

public abstract class Container <T>
	public abstract  virtual declare sub push(t as T)
	public abstract  virtual declare function pop() as T throws StackEmptyException
end

class Object<T> : Container,Hashable
	public override function hash() as int
		return 12
	end
	public virtual override function equals(k as Hashable) as boolean
		try
			//dim in as Object<T> =k::Object:>
			//return in==this
			return true
		catch ClassCastException e
			return false
		end
	end
	public virtual override sub push(t as T)
		//push
	end
	public virtual override function pop() as T throws StackEmptyException
		//pop
	end
end


dim a as Object<HString> =new Object()
dim b as HString=new HString("JI")
println(a.equals(b))
dim arr as int[]
arr={1,2,a.hash()}
println(arr[2])

