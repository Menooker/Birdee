require Remote

shared class ClsA
	public a as int
	public b as int
	public c as ClsB
end

shared class ClsB
	public a as double
	public b as double
	public c as ClsA	
end

sub assert(v as boolean, prompt as string)
	if v==false then
		println(prompt)
		BreakPoint()
	end
end

dim hosts as string[]={"127.0.0.1","127.0.0.1"}
dim ports as int[]={13020,13090}
//dim hosts as string[]=new string[0]
//dim ports as int[]=new int[0]
dim mem_hosts as string[]={"127.0.0.1"}
dim mem_ports as int[]={11211}
dim nodes as RemoteNode[]=ConnectNode(5080,hosts,ports,mem_hosts,mem_ports)


dim threads as shared int=2
dim node_num as shared int=2
dim thread_num as shared int=threads*node_num
dim n as shared int=4096*8
dim p as shared int[] global=new int[n] global
dim p2 as int[]=new int[n]
dim rand_num as int =1234

dim a1 as ClsA=new ClsA()
dim b1 as ClsB=new ClsB()
a1.c=b1
b1.c=a1
a1=null
b1=null
//made a reference loop above

a1=new ClsA()
b1=new ClsB()
a1.c=b1
a1.a=1
b1.a=2.0
b1=null
//b1.c is not initialized

dim a2 as shared ClsA=new ClsA()
dim b2 as ClsB=new ClsB()
b2.a=12.0
b2.b=1.0
a2.c=b2
b2=null
//check if b2 is alive

dim arr1 as shared int[][] global=new int[10][10] global
for #i=0;#i<10;#i++
    for #j=0;#j<10;#j++
		arr1[#i][#j]=#i+#j
	end
end

dim arr2 as ClsA[] global=new ClsA[10] global
arr2[1]=new ClsA()
arr2[1].a=12
arr2[1].c=new ClsB()
arr2[1].c.a=33.0

dim tid as int
for #i=0;#i<node_num;#i++
    for #j=0;#j<threads;#j++
        nodes[#i].CreateThread(threadproc,tid)
        tid++
    end
end

//check!

assert(a1.c.a==2.0,"a1.c.a==2.0")
assert(a2.c.a==12.0,"a2.c.a==12.0")
assert(a2.c.b==1.0,"a2.c.b==1.0")
for #i=0;#i<10;#i++
    for #j=0;#j<10;#j++
		assert(arr1[#i][#j]==#i+#j,"arr1[#i][#j]==#i+#j")
	end
end
assert(arr2[1].a==12,"arr2[1].a==12")
assert(arr2[1].c.a==33.0,"arr2[1].c.a==33.0")

//nodes[0].Close()
//nodes[1].Close()
gets()
