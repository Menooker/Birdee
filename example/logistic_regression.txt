require Remote
require math

const round  = 10
const verify_round = 1
const sample_num = 20000
const threads_per_node =2
const features =100
const step_size =0.05

dim cur_round as int
dim time_total as int=GetClock()
dim time_calc as int
dim hosts as string[]={"10.0.3.16","10.0.3.20","10.0.3.21","10.0.3.22"}
dim ports as int[]={13070,13070,13070,13070}
dim mem_hosts as string[]={"10.0.3.16","10.0.3.20","10.0.3.21","10.0.3.22"}
dim mem_ports as int[]={11211,11211,11211,11211}
/*dim hosts as string[]={"127.0.0.1","127.0.0.1"}
dim ports as int[]={13070,13080}
dim mem_hosts as string[]={"127.0.0.1"}
dim mem_ports as int[]={11211}*/
dim nodes as RemoteNode[]=ConnectNode(5080,hosts,ports,mem_hosts,mem_ports)

println("working")

dim node_num as shared int=hosts.size()
dim thread_num as shared int=threads_per_node*node_num

dim feature_len as shared int
if (features+1) % 32 == 0 then
	feature_len = (features+1) / 32 * 32
else
	feature_len = (features+1) / 32 * 32 + 32
end

dim barrier_main as shared RBarrier=new RBarrier(thread_num+1)
dim barrier_internal as shared RBarrier=new RBarrier(thread_num)
dim barrier_put as shared RBarrier=new RBarrier(node_num+1)
dim global_verify_miss_count as shared AtomicCounter=new AtomicCounter(0)
dim verify_miss_count as AtomicCounter=global_verify_miss_count

dim param as shared double[] global = new double[feature_len] global
dim n2 as int=feature_len * thread_num * sample_num
dim global_gradient as shared double[] global = new double[feature_len * node_num] global
dim data_set as shared double[] global =new double[n2] global




function putproc(id as var) as int
	dim mlocal as double[]=new double[feature_len*1000]
	dim file as CSVReader=new CSVReader("/home/menooker/data.csv")
	dim fl as int=feature_len
	dim ds as double[] global=data_set
	dim i as int
	dim j as int
	dim chunk_size as int=sample_num/node_num
	file.Skip(chunk_size*id)
	for i=chunk_size*id;i<chunk_size*(id+1);i+=1000
		for j=0;j<1000;j++
			if(file.ReadLine(mlocal,j*fl)<0) then
				file.Reset()
				file.ReadLine(mlocal,j*fl)
			end
		end
		ds[i*fl: (i+1000)*fl]=mlocal[0:fl*1000]
	end
	file.Close()
	barrier_put.Enter(-1)
end

sub put_matrix()
	dim tm as int=GetClock()
	dim i as int
	for i=0;i<node_num;i++
		nodes[i].CreateThread(putproc,i)
	end
	barrier_put.Enter(-1)
	println("Put time"+(GetClock()-tm))
end

dim time as int=GetClock()
put_matrix()
dim ttid as int=0
dim ii as int
dim jj as int
for ii=0;ii<node_num;ii++
	for jj=0;jj<threads_per_node;jj++
		nodes[ii].CreateThread(threadproc,ttid)
		ttid++
	end
end
for cur_round=0;cur_round<round;cur_round++
	//put_matrix()

	barrier_main.Enter(-1)
	dim t as int
	t=GetClock()-time
	println("time1 "+ t)
	time=GetClock()
end

println("================\nLearning ok, now verify")
for ;cur_round<round+verify_round;cur_round++
	//put_matrix()

	barrier_main.Enter(-1)
	t=GetClock()-time
	println("time1 "+ t)
	time=GetClock()
end

println(verify_miss_count.Get()*1.0/1000/thread_num)
println("total time: "+ (GetClock()-time_total))
//file.Close()
gets()


function myrand() as int
	dim p as int=rand(sample_num-10000)
	if p<0 then
		p=-p
	end
	return p
end
dim myparam as double[]
dim gradient as double[][]
dim volatile sync2 as int
dim myfeatures as int
dim myfeature_len as int
dim ths as int
dim mystep_size as double
dim mythreads as int
dim gparam as double[] global
dim gdata_set as double[] global
dim b_main as RBarrier
dim b_int as RBarrier

sub zero_gradient(idx as int)
	dim i as int
	for i=0;i<myfeature_len;i++
		gradient[idx][i]=0
	end
end

function threadproc(id as var) as int
unsafe
	dim tid as int=id
	dim i as int
	dim j as int
	dim k as int
	dim st as int=tid % ths
	dim mround as int
	dim node_id as int=tid/ths
	dim mydata_set as double[] =new double[myfeature_len * 1000]
	mydata_set[0]=feature_len
	gradient[0][0]=0
	dim dot as double
	dim h as double
	dim ran as int
	for mround=0;mround<round;mround++
		//phase 1: copy the parameter vector
		//println("K1 "+mround+" "+st)
		myparam[myfeature_len*st/ths : myfeature_len*(st+1)/ths]=gparam[myfeature_len*st/ths : myfeature_len*(st+1)/ths]
		sync2@+=1
		for ;;
			if sync2 % ths==0 then
				break
			end
		end
		//phase 2: copy the data set
		//println("K2 "+mround+" "+st)
		ran=myrand()
		mydata_set[0:myfeature_len * 1000]=gdata_set[ran*myfeature_len : (ran+1000)*myfeature_len]
		

		zero_gradient(st)

		//phase 3: calculate the gradient on the set of data
		//println("K3 "+mround+" "+st)
		dim base as int
		base=0
		for i=0;i<1000;i++
			dot=0
			for j=0;j<myfeatures;j++
				dot+=myparam[j]*mydata_set[base+j]
			end
			h=1/(1+exp(-dot))
			dim delta as double=mydata_set[base+myfeatures]-h
			for j=0;j<myfeatures;j++
				gradient[st][j]+= mystep_size * delta * mydata_set[base+j]
			end
			base+=myfeature_len
		end

		//phase 4: sum up the local gradient
		//println("K4 "+mround+" "+st)
		if st==0 then
			for i=1;i<ths;i++
				for j=0;j<myfeatures;j++
					gradient[0][j]+=gradient[i][j]
				end
			end
			global_gradient[node_id * myfeature_len : (node_id+1) * myfeature_len]=gradient[0][0:myfeature_len]
		end
		
		b_int.Enter(-1)	
		//phase 5: (only on thread 0), sum over the global gradient, calculate the new parameter vector
		//println("K5 "+mround+" "+st)
		if tid==0 then
			mydata_set[0: myfeature_len * mythreads/ths]=global_gradient[0: myfeature_len * mythreads/ths]
			for i=0;i<mythreads/ths;i++
				for j=0;j<myfeatures;j++
					myparam[j]+=mydata_set[i*myfeature_len + j]
				end
			end
			gparam[0: myfeature_len]=myparam[0: myfeature_len]
		end
		b_main.Enter(-1)
		
	end


	myparam[feature_len*st/ths : feature_len*(st+1)/ths]=gparam[feature_len*st/ths : feature_len*(st+1)/ths]
	sync2@+=1
	for ;;
		if sync2 % ths==0 then
			break
		end
	end

	//now verify the parameter vector
	for mround=0;mround<verify_round;mround++
		//phase 1: copy the data set
		ran=myrand()
		mydata_set[0:myfeature_len * 1000]=gdata_set[ran*myfeature_len : (ran+1000)*myfeature_len]

		//phase 2: calculate the misses on the set of data
		dim base as int
		base=0
		for i=0;i<1000;i++
			dot=0
			for j=0;j<myfeatures;j++
				dot+=myparam[j]*mydata_set[base+j]
			end
			h=1/(1+exp(-dot))
			if h>=0.5 && mydata_set[base+myfeatures]==0.0 then
				verify_miss_count.Inc(1)
			elseif h<0.5 && mydata_set[base+myfeatures]==1.0 then
				verify_miss_count.Inc(1)
			end
			base+=myfeature_len
		end
		b_main.Enter(-1)
	end
end

sub RemoteInitialize()
	verify_miss_count=global_verify_miss_count
	myfeature_len = feature_len
	ths =threads_per_node
	mythreads=thread_num
	gradient=new double[ths][myfeature_len]
	myparam=new double[myfeature_len]
	b_int=barrier_internal
	b_main=barrier_main
	gparam=param
	gdata_set=data_set
end
