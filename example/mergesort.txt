require Remote

dim hosts as string[]={"127.0.0.1","127.0.0.1"}
dim ports as int[]={13020,13090}
//dim hosts as string[]=new string[0]
//dim ports as int[]=new int[0]
dim mem_hosts as string[]={"127.0.0.1"}
dim mem_ports as int[]={11211}
dim nodes as RemoteNode[]=ConnectNode(5080,hosts,ports,mem_hosts,mem_ports)


dim threads as shared int=2
dim node_num as shared int=2
dim thread_num as shared int=threads*node_num
dim n as shared int=4096*8
dim p as shared int[] global=new int[n] global
dim p2 as int[]=new int[n]
dim rand_num as int =1234

dim time as int=GetClock()
dim ii as int
for ii=0;ii<n;ii++
unsafe
	/*p[ii]=rand_num
	p2[ii]=rand_num
	rand_num=(rand_num*rand_num+rand_num*17+3)
	*/
	p2[ii]=n-ii
end
p[0:n]=p2[0:n]

println("Put ok " + (GetClock()-time))

/*
threadproc2(0)
println("LOCAL OK")
for ii=0;ii<20;ii++
    println(p2[ii])
end
*/
time=GetClock()

dim barrier as shared RemoteBarrier=new RemoteBarrier(thread_num)
dim barrier_main as shared RemoteBarrier=new RemoteBarrier(thread_num+1)

dim tid as int
for #i=0;#i<node_num;#i++
    for #j=0;#j<threads;#j++
        nodes[#i].CreateThread(threadproc,tid)
        //CreateThread(threadproc,true,tid)
        tid++
    end
end




try
	barrier_main.enter(-1,32)
catch CounterOutOfBoundException err2
	println("Error!")
end
println("DONE "+ (GetClock()-time))
dim last as int=-100000000
for ii=0;ii<20;ii++
    println(p[ii])
end
for ii=0;ii<n;ii++
unsafe
	/*if p[ii]!=p2[ii] then
		println("ERROR"+ii + " "+p[ii] + " "+p2[ii])
		gets()
	end
	*/
	if p[ii]!=ii+1 then
		println("ERROR"+ (ii+1) + " "+p[ii] )
		gets()
	end
end

//nodes[0].Close()
//nodes[1].Close()
gets()

function threadproc(id as var) as int
unsafe
    println("ID="+id)
	dim base as int
	dim tmp as int[]=new int[n]
    dim current_step as int
	for current_step=2;current_step<=n;current_step*=2
		println(current_step)
		for base=id*current_step;base<n;base+=thread_num*current_step
			dim start1 as int=base
			dim start2 as int=base+current_step/2
			dim end1 as int=start2
			dim end2 as int=base+current_step

			dim i as int
			for i=0;i<current_step;i++
				if start1>=end1 then
					tmp[i]=p[start2]
					start2++
					continue
				end

				if start2>=end2 then
					tmp[i]=p[start1]
					start1++
					continue
				end
				if p[start1]<p[start2] then
					tmp[i]=p[start1]
					start1++
				else
					tmp[i]=p[start2]
					start2++
				end
			end
			/*for i=0;i<current_step;i++
				p[base+i]=tmp[i]
			end*/
			p[base:current_step+base]=tmp[0:current_step]
		end
		try
			barrier.enter(-1,32)
		catch CounterOutOfBoundException err
			println("Error!")
		end

	end
	try
		barrier_main.enter(0,32)
	catch CounterOutOfBoundException err
		println("Error!")
	end
end

function threadproc2(id as var) as int
	dim base as int
	dim tmp as int[]=new int[n]
    dim current_step as int
	for current_step=2;current_step<=n;current_step*=2
		for base=0;base<n;base+=current_step
			dim start1 as int=base
			dim start2 as int=base+current_step/2
			dim end1 as int=start2
			dim end2 as int=base+current_step

			dim i as int
			for i=0;i<current_step;i++
				if start1>=end1 then
					tmp[i]=p2[start2]
					start2++
					continue
				end

				if start2>=end2 then
					tmp[i]=p2[start1]
					start1++
					continue
				end
				if p2[start1]<p2[start2] then
					tmp[i]=p2[start1]
					start1++
				else
					tmp[i]=p2[start2]
					start2++
				end
			end
			for i=0;i<current_step;i++
				p2[base+i]=tmp[i]
			end
		end
	end
end
