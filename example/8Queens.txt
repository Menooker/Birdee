require math

dim t as int=GetClock()
dim rnd as int
final N as int= 5000
dim YY as int[]=new int[N]
dim QY as int[]=new int[N]
dim MD as int[]=new int[2*N] 
dim CD as int[]=new int[2*N] 
main()
println((GetClock()-t))








sub initYY(y as int[]) 
	dim t1 as int
	dim t2 as int
	dim p as int
	dim i as int
	for i=0;i<N;i++
	
		y[i]=i
	end
	for i=0;i<N;i++
		t1=rand(N)
		t2=rand(N)
		p=y[t2]
		y[t2]=y[t1]
		y[t1]=p
	end
end



sub conflict()
	dim i as int
	for i=0;i<N;i++
	
		MD[i+YY[i]]++
		CD[i-YY[i]+N-1]++
		QY[YY[i]]++
	end
end


sub print_queens(y as int[])
	dim i as int
	for i=N-1;i>=0;i--
	
		dim j as int
		for j=0;j<YY[i];j++
		
			print("0 ")
		end
		print("x ")
		for j=YY[i]+1;j<N;j++
		
			print("0 ")
		end
		print("\n")
	end
end






function CheckStatus() as boolean

	dim i as int
	for i=0;i<N;i++
	
		if QY[i]>=2 then
			return false
		end
	end
	for i=0;i<2*N-1;i++
	
		if MD[i]>=2 then
			return false
		end
		if CD[i]>=2 then
			return false
		end
	end
	return true
end

function step(x as int) as boolean

	dim besty as int =YY[x]
	dim best_conflict as int=QY[besty]+MD[x+YY[x]]+CD[x-YY[x]+N-1]-2
	dim conflict as int
	dim i as int
	for i=0;i<N;i++
	
		conflict=QY[i]+MD[x+i]+CD[x-i+N-1]
		if conflict<best_conflict then
			best_conflict=conflict
			besty=i
		end
	end
	if besty!=YY[x] then
	
		QY[YY[x]]--
		MD[x+YY[x]]--
		CD[x-YY[x]+N-1]--
		YY[x]=besty
		QY[YY[x]]++
		MD[x+YY[x]]++
		CD[x-YY[x]+N-1]++
		return true
	end

end

sub main()
	initYY(YY) 
	conflict()
	if CheckStatus() then
		print_queens(YY)
	else
		dim j as int
		dim i as int
		dim changed as boolean
		dim found as boolean=false
		for i=0;i<200;i++
			
			changed=false
			for j=0;j<N;j++
			
				changed = step(j) | changed
			end
			if !changed then
			
				print("fail\n")
				break
			end
			if CheckStatus() then
				rnd=i
				found=true
				print(""+i+"rounds\n")
				break
			end
		end
		if found then
			//print_queens(YY)
		else
			print("iteration exceeded\n")
			return
		end
	end
	return 
end
